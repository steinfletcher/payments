// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/steinfletcher/payments (interfaces: PaymentService)

package mocks

import (
	uuid "github.com/google/uuid"
	pegomock "github.com/petergtz/pegomock"
	payments "github.com/steinfletcher/payments"
	"reflect"
	"time"
)

type MockPaymentService struct {
	fail func(message string, callerSkip ...int)
}

func NewMockPaymentService(options ...pegomock.Option) *MockPaymentService {
	mock := &MockPaymentService{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockPaymentService) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockPaymentService) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockPaymentService) Get(id uuid.UUID) (payments.Payment, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPaymentService().")
	}
	params := []pegomock.Param{id}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Get", params, []reflect.Type{reflect.TypeOf((*payments.Payment)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 payments.Payment
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(payments.Payment)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPaymentService) GetAll() (payments.Payments, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPaymentService().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetAll", params, []reflect.Type{reflect.TypeOf((*payments.Payments)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 payments.Payments
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(payments.Payments)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPaymentService) Delete(id uuid.UUID) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPaymentService().")
	}
	params := []pegomock.Param{id}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Delete", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockPaymentService) Update(id uuid.UUID, payment payments.Payment) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPaymentService().")
	}
	params := []pegomock.Param{id, payment}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Update", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockPaymentService) Create(payment payments.Payment) (uuid.UUID, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPaymentService().")
	}
	params := []pegomock.Param{payment}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Create", params, []reflect.Type{reflect.TypeOf((*uuid.UUID)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 uuid.UUID
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(uuid.UUID)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockPaymentService) VerifyWasCalledOnce() *VerifierMockPaymentService {
	return &VerifierMockPaymentService{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockPaymentService) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockPaymentService {
	return &VerifierMockPaymentService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockPaymentService) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockPaymentService {
	return &VerifierMockPaymentService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockPaymentService) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockPaymentService {
	return &VerifierMockPaymentService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockPaymentService struct {
	mock                   *MockPaymentService
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockPaymentService) Get(id uuid.UUID) *MockPaymentService_Get_OngoingVerification {
	params := []pegomock.Param{id}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Get", params, verifier.timeout)
	return &MockPaymentService_Get_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPaymentService_Get_OngoingVerification struct {
	mock              *MockPaymentService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPaymentService_Get_OngoingVerification) GetCapturedArguments() uuid.UUID {
	id := c.GetAllCapturedArguments()
	return id[len(id)-1]
}

func (c *MockPaymentService_Get_OngoingVerification) GetAllCapturedArguments() (_param0 []uuid.UUID) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]uuid.UUID, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(uuid.UUID)
		}
	}
	return
}

func (verifier *VerifierMockPaymentService) GetAll() *MockPaymentService_GetAll_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetAll", params, verifier.timeout)
	return &MockPaymentService_GetAll_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPaymentService_GetAll_OngoingVerification struct {
	mock              *MockPaymentService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPaymentService_GetAll_OngoingVerification) GetCapturedArguments() {
}

func (c *MockPaymentService_GetAll_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockPaymentService) Delete(id uuid.UUID) *MockPaymentService_Delete_OngoingVerification {
	params := []pegomock.Param{id}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Delete", params, verifier.timeout)
	return &MockPaymentService_Delete_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPaymentService_Delete_OngoingVerification struct {
	mock              *MockPaymentService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPaymentService_Delete_OngoingVerification) GetCapturedArguments() uuid.UUID {
	id := c.GetAllCapturedArguments()
	return id[len(id)-1]
}

func (c *MockPaymentService_Delete_OngoingVerification) GetAllCapturedArguments() (_param0 []uuid.UUID) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]uuid.UUID, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(uuid.UUID)
		}
	}
	return
}

func (verifier *VerifierMockPaymentService) Update(id uuid.UUID, payment payments.Payment) *MockPaymentService_Update_OngoingVerification {
	params := []pegomock.Param{id, payment}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Update", params, verifier.timeout)
	return &MockPaymentService_Update_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPaymentService_Update_OngoingVerification struct {
	mock              *MockPaymentService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPaymentService_Update_OngoingVerification) GetCapturedArguments() (uuid.UUID, payments.Payment) {
	id, payment := c.GetAllCapturedArguments()
	return id[len(id)-1], payment[len(payment)-1]
}

func (c *MockPaymentService_Update_OngoingVerification) GetAllCapturedArguments() (_param0 []uuid.UUID, _param1 []payments.Payment) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]uuid.UUID, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(uuid.UUID)
		}
		_param1 = make([]payments.Payment, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(payments.Payment)
		}
	}
	return
}

func (verifier *VerifierMockPaymentService) Create(payment payments.Payment) *MockPaymentService_Create_OngoingVerification {
	params := []pegomock.Param{payment}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Create", params, verifier.timeout)
	return &MockPaymentService_Create_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPaymentService_Create_OngoingVerification struct {
	mock              *MockPaymentService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPaymentService_Create_OngoingVerification) GetCapturedArguments() payments.Payment {
	payment := c.GetAllCapturedArguments()
	return payment[len(payment)-1]
}

func (c *MockPaymentService_Create_OngoingVerification) GetAllCapturedArguments() (_param0 []payments.Payment) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]payments.Payment, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(payments.Payment)
		}
	}
	return
}
